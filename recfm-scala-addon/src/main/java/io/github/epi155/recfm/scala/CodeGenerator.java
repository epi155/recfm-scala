package io.github.epi155.recfm.scala;

import io.github.epi155.recfm.api.CodeProvider;
import io.github.epi155.recfm.scala.factory.AccessFactory;
import io.github.epi155.recfm.scala.factory.InitializeFactory;
import io.github.epi155.recfm.scala.factory.PrepareFactory;
import io.github.epi155.recfm.scala.factory.ValidateFactory;
import io.github.epi155.recfm.type.*;
import io.github.epi155.recfm.util.DumpFactory;
import io.github.epi155.recfm.util.DumpInfo;
import io.github.epi155.recfm.util.GenerateArgs;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.PrintWriter;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.IntFunction;

import static io.github.epi155.recfm.util.Tools.capitalize;

@Slf4j
public class CodeGenerator implements IndentAble, CodeProvider {
    private static final String SYSTEM_PACKAGE = "io.github.epi155.recfm.scala";

    static void writeCopyright(@NotNull PrintWriter pw, @NotNull GenerateArgs ga) {
        String now = ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT);
        pw.println("/*");
        pw.printf(" * Generated by %s:%s:%s at %s%n", ga.group, ga.artifact, ga.version, now);
        pw.println(" */");
    }

    @Override
    public File fileOf(String cwd, String name) {
        return new File(cwd + File.separator + name + ".scala");
    }

    @Override
    public void createClass(PrintWriter pw, String wrtPackage, ClassDefine struct, GenerateArgs ga, Defaults defaults) {
        writePackage(pw, wrtPackage, ga);
        writeImport(pw);
        generateClassCode(pw, struct, ga, defaults, n -> String.format("%d", n - 1));
    }

    private void writePackage(PrintWriter pw, String packg, @NotNull GenerateArgs ga) {
        writeCopyright(pw, ga);
        pw.printf("package %s%n%n", packg);
    }

    private void writeImport(@NotNull PrintWriter pw) {
        pw.printf("import %s.{FieldValidateHandler, FixRecord, OverflowAction, UnderflowAction}%n", CodeGenerator.SYSTEM_PACKAGE);
        pw.println();
    }

    private void generateClassCode(PrintWriter pw, ClassDefine struct, GenerateArgs ga, Defaults defaults, IntFunction<String> pos) {
        writeBeginObject(pw, struct);
        writeConstant(pw, struct);
        writeFactories(pw, struct);
        writeEndClass(pw, 0);

        writeBeginClass(pw, struct);
        struct.getFields().forEach(it -> {
            if (it instanceof SelfCheck) ((SelfCheck) it).selfCheck();
            if (it instanceof ParentFields) generateGroupCode((ParentFields) it, pw, 2, ga, defaults, pos, struct.getName());
        });
        val objName = struct.getName();
        val access = new AccessFactory(pw, defaults, pos, objName);
        writeCtorVoid(pw, struct.getName());
        writeCtorParm(pw, struct);
        writeInitializer(pw, struct, defaults);
        writeValidator(pw, struct, defaults);
        struct.getFields().forEach(it -> {
            if (it instanceof SettableField) access.createMethods((SettableField) it, 2, ga);
        });
        writeDump(pw, struct.getFields());
        writeEndClass(pw, 0);
    }

    private void writeDump(PrintWriter pw, List<NakedField> fields) {
        List<DumpInfo> l3 = DumpFactory.getInstance(fields);
        if (!l3.isEmpty()) {
            pw.printf("  override def toString: String = {%n");
            pw.printf("    val sb = new StringBuilder%n");
            l3.forEach(it -> writeFieldDump(pw, it));
            pw.printf("    return sb.toString%n");
            closeBrace(pw);
        }
    }

    private void writeFieldDump(PrintWriter pw, DumpInfo it) {
        pw.printf("    sb ++= \"%s : \" ++= dump(%d,%d) ++= System.lineSeparator%n", it.name, it.offset - 1, it.length);
    }

    private void writeFactories(@NotNull PrintWriter pw, @NotNull ClassDefine struct) {
        pw.printf("  def decode(s: String) = new %s(s)%n", struct.getName());
        pw.printf("  def of(r: FixRecord) = new %s(r)%n", struct.getName());
    }

    private void generateGroupCode(
            ParentFields fld,
            PrintWriter pw,
            int indent,
            GenerateArgs ga,
            Defaults defaults,
            IntFunction<String> pos,
            String name) {
        AccessFactory access;
        if (fld instanceof FieldOccurs) {
            writeBeginClassOccurs(pw, (FieldOccurs) fld, indent);
            access = new AccessFactory(pw, defaults, n -> String.format("%d+shift", n - 1), name);
        } else /* fld instanceof FieldGroup */ {
            writeBeginClassGroup(pw, fld.getName(), indent);
            access = new AccessFactory(pw, defaults, pos, name);
        }
        fld.getFields().forEach(it -> {
            if (it instanceof SelfCheck) ((SelfCheck) it).selfCheck();
            if (it instanceof ParentFields) generateGroupCode((ParentFields) it, pw, indent + 2, ga, defaults, pos, name);
        });
        fld.getFields().forEach(it -> {
            if (it instanceof SettableField) access.createMethods((SettableField) it, indent+2, ga);
        });
        writeEndClass(pw, indent);
        if (fld instanceof FieldOccurs) {
            writeClassOccurs(pw, (FieldOccurs) fld, indent);
        } else {
            writeClassGroup(pw, fld.getName(), indent);
        }
    }

    private void writeClassGroup(PrintWriter pw, String name, int indent) {
        String capName = capitalize(name);
        indent(pw, indent);
        pw.printf("val %s = new this.%s%n", name, capName);
    }

    private void writeBeginClassGroup(PrintWriter pw, String name, int indent) {
        String capName = capitalize(name);
        indent(pw, indent);
        pw.printf("class %s {%n", capName);
    }

    private void writeBeginClassOccurs(PrintWriter pw, @NotNull FieldOccurs fld, int indent) {
        String capName = capitalize(fld.getName());
        indent(pw, indent);
        pw.printf("class %s(private val shift: Int) {%n", capName);
    }

    private void writeClassOccurs(PrintWriter pw, @NotNull FieldOccurs fld, int indent) {
        String capName = capitalize(fld.getName());
        indent(pw, indent);
        pw.printf("private val _%s = Array[%s](%n", fld.getName(), capName);
        val times = fld.getTimes();
        for (int k = 0, j = times, shift = 0; k < times; k++, j--, shift += fld.getLength()) {
            indent(pw, indent);
            pw.printf("  new this.%s(%d)%s%n", capName, shift, (j > 1 ? "," : ")"));
        }
        indent(pw, indent);
        pw.printf("final def %1$s(k: Int): %2$s = _%1$s(k-1)%n", fld.getName(), capName);
        pw.println();
    }

    private void writeValidator(PrintWriter pw, @NotNull ClassDefine struct, Defaults defaults) {
        int padWidth = struct.evalPadWidth(6);
        val validator = new ValidateFactory(pw, struct.getName(), defaults);
        pw.printf("  override protected def validateFields(handler: FieldValidateHandler): Boolean = {%n");
        AtomicBoolean firstCheck = new AtomicBoolean(true);
        for (NakedField fld : struct.getFields()) {
            validator.validate(fld, padWidth, 1, firstCheck);
        }
        if (firstCheck.get()) {
            pw.printf("    false%n");
        } else {
            pw.printf("    error%n");
        }
        closeBrace(pw);
        pw.printf("  override protected def auditFields(handler: FieldValidateHandler): Boolean = {%n");
        AtomicBoolean firstAudit = new AtomicBoolean(true);
        for (NakedField fld : struct.getFields()) {
            if (fld instanceof CheckAware && ((CheckAware) fld).isAudit()) {
                validator.validate(fld, padWidth, 1, firstAudit);
            }
        }
        if (firstAudit.get()) {
            pw.printf("    false%n");
        } else {
            pw.printf("    error%n");
        }
        closeBrace(pw);
    }

    private void writeCtorVoid(@NotNull PrintWriter pw, String name) {
        pw.printf("  def this() = this(%s.LRECL, null, null, false, false)%n", name);
    }

    private void writeCtorParm(@NotNull PrintWriter pw, @NotNull ClassDefine define) {
        define.onOverflowDefault(LoadOverflowAction.Trunc);
        define.onUnderflowDefault(LoadUnderflowAction.Pad);
        pw.printf("  private def this(s: String) = this(%s.LRECL, s, null, %b, %b)%n",
                define.getName(), define.onOverflowThrowError(), define.onUnderflowThrowError());
        pw.printf("  private def this(r: FixRecord) = this(%s.LRECL, null, r, %b, %b)%n",
                define.getName(), define.onOverflowThrowError(), define.onUnderflowThrowError());
    }

    private void writeInitializer(@NotNull PrintWriter pw, ClassDefine struct, Defaults defaults) {
        pw.printf("  override protected def initialize(): Unit = {%n");
        val initializer =new InitializeFactory(pw, struct, defaults);
        struct.getFields().forEach(it -> initializer.field(it, 1));
        closeBrace(pw);
    }

    private void closeBrace(@NotNull PrintWriter pw) {
        pw.printf("  }%n%n");
    }

    private void writeEndClass(PrintWriter pw, int indent) {
        indent(pw, indent);
        pw.write("}");
        pw.println();
    }

    private void writeConstant(@NotNull PrintWriter pw, @NotNull ParentFields struct) {
        pw.printf("  val LRECL = %d%n", struct.getLength());
        val preparer = new PrepareFactory(pw);
        struct.getFields().forEach(it -> preparer.prepare(it, 1));
    }

    private void writeBeginObject(@NotNull PrintWriter pw, @NotNull ClassDefine struct) {
        pw.printf("object %s {%n", struct.getName());
    }

    private void writeBeginClass(@NotNull PrintWriter pw, @NotNull ClassDefine struct) {
        pw.printf("class %s private (length: Int, s: String, r: FixRecord, overflowError: Boolean, underflowError: Boolean)\n" +
                "  extends FixRecord(length, s, r, overflowError, underflowError) {%n", struct.getName());
    }
}